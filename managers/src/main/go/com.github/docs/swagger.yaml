basePath: /
definitions:
  dto.CategoryDto:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: Phone
        type: string
      subcategories:
        items:
          $ref: '#/definitions/dto.SubcategoryDto'
        type: array
    type: object
  dto.CommentDto:
    properties:
      description:
        example: This is comment description
        type: string
      id:
        example: 1
        type: integer
      name:
        example: comment author
        type: string
    type: object
  dto.CriteriaDto:
    properties:
      id:
        example: 1
        type: integer
      value:
        example: 60#
        type: string
    type: object
  dto.CustomerDto:
    properties:
      customerAddress:
        example: Brodvey
        type: string
      customerEmail:
        example: julvern@gmail.com
        type: string
      customerName:
        example: Julvern
        type: string
      customerPhone:
        example: "+780466869"
        type: string
      id:
        example: 1
        type: integer
      purchaseId:
        example: 11
        type: integer
    type: object
  dto.DeliveryDto:
    properties:
      branchAddress:
        example: 189 street
        type: string
      companyName:
        example: NowaPoshta
        type: string
      id:
        example: 1
        type: integer
      type:
        example: home
        type: string
    type: object
  dto.FilterDto:
    properties:
      criteria:
        items:
          $ref: '#/definitions/dto.CriteriaDto'
        type: array
      id:
        example: 1
        type: integer
      title:
        example: filter_title
        type: string
    type: object
  dto.ManagerDto:
    properties:
      firstName:
        example: Michal
        type: string
      lastName:
        example: Mackonagen
        type: string
    type: object
  dto.OrderDto:
    properties:
      amount:
        example: 1.99
        type: number
      customer:
        $ref: '#/definitions/dto.CustomerDto'
      delivery:
        $ref: '#/definitions/dto.DeliveryDto'
      id:
        example: 1
        type: integer
      product:
        items:
          $ref: '#/definitions/dto.ProductDto'
        type: array
      status:
        example: status
        type: string
    type: object
  dto.ProductDto:
    properties:
      brandName:
        example: IPhone
        type: string
      comments:
        items:
          $ref: '#/definitions/dto.CommentDto'
        type: array
      description:
        example: This is phone
        type: string
      id:
        example: 1
        type: integer
      images:
        items:
          type: string
        type: array
      name:
        example: Phone
        type: string
      previewImage:
        example: image
        type: string
      price:
        example: 1.11
        type: number
      quantity:
        example: 10
        type: integer
      specifications:
        items:
          $ref: '#/definitions/dto.SpecificationDto'
        type: array
      subcategoryName:
        example: phone
        type: string
    type: object
  dto.PurchaseDto:
    properties:
      orderId:
        example: 1
        type: integer
      status:
        example: open or close
        type: string
    type: object
  dto.SpecificationDto:
    properties:
      description:
        example: supper sensor
        type: string
      id:
        example: 1
        type: integer
      name:
        example: settings
        type: string
    type: object
  dto.SubcategoryDto:
    properties:
      filters:
        items:
          $ref: '#/definitions/dto.FilterDto'
        type: array
      id:
        example: 1
        type: integer
      name:
        example: Phone
        type: string
    type: object
info:
  contact: {}
  description: This is a sample service for managers
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Managers API
  version: "1.0"
paths:
  /v1:
    post:
      consumes:
      - application/json
      description: Save a new purchases
      parameters:
      - description: Save purchase
        in: body
        name: purchase
        required: true
        schema:
          $ref: '#/definitions/dto.PurchaseDto'
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201": {}
        "400": {}
        "403": {}
      summary: Save a new purchases
      tags:
      - purchases
  /v1/{orderId}/{status}:
    put:
      consumes:
      - application/json
      description: Update order by status
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: integer
      - description: Order Status
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200": {}
        "403": {}
        "404": {}
      summary: Update order by status
      tags:
      - purchases
  /v1/{status}:
    get:
      consumes:
      - application/json
      description: Get a all orders by status
      parameters:
      - description: Order Status
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OrderDto'
        "400": {}
        "403": {}
      summary: Get a all orders by status
      tags:
      - purchases
  /v1/all/{status}:
    get:
      consumes:
      - application/json
      description: Get a all orders by status
      parameters:
      - description: Order Status
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OrderDto'
        "400": {}
        "403": {}
      summary: Get a all orders by status
      tags:
      - purchases
  /v1/binding/{orderId}:
    get:
      consumes:
      - application/json
      description: Get binding orders by order id
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OrderDto'
        "400": {}
        "403": {}
      summary: Get binding orders by order id
      tags:
      - user-orders
  /v1/category:
    post:
      consumes:
      - application/json
      description: Save product category
      parameters:
      - description: Create category
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CategoryDto'
        "400": {}
        "403": {}
      summary: Save category
      tags:
      - products category
    put:
      consumes:
      - application/json
      description: Update category
      parameters:
      - description: Create category
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryDto'
      produces:
      - application/json
      responses:
        "200": {}
        "403": {}
        "404": {}
      summary: Update Category
      tags:
      - products category
  /v1/category/{categoryName}:
    get:
      consumes:
      - application/json
      description: Get category by category name
      parameters:
      - description: Category Name
        in: path
        name: categoryName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CategoryDto'
        "400": {}
        "403": {}
      summary: Get category by category name
      tags:
      - products category
  /v1/criteria:
    put:
      consumes:
      - application/json
      description: Update criteria information
      parameters:
      - description: Update criteria
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.CriteriaDto'
      produces:
      - application/json
      responses:
        "200": {}
        "403": {}
        "404": {}
      summary: Update criteria
      tags:
      - filters
  /v1/criteria/{criteriaId}:
    get:
      consumes:
      - application/json
      description: Get criteria
      parameters:
      - description: Criteria ID
        in: path
        name: criteriaId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CriteriaDto'
        "400": {}
        "403": {}
      summary: Get criteria
      tags:
      - criteria
  /v1/criteria/in/filters/{filterId}/{criteriaId}:
    put:
      consumes:
      - application/json
      description: Update criteria information
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      - description: Criteria ID
        in: path
        name: criteriaId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200": {}
        "403": {}
        "404": {}
      summary: Update criteria
      tags:
      - criteria
  /v1/criteria/in/product/{productId}/{criteriaId}:
    put:
      consumes:
      - application/json
      description: Update criteria information
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      - description: Criteria ID
        in: path
        name: criteriaId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200": {}
        "403": {}
        "404": {}
      summary: Update criteria
      tags:
      - criteria
  /v1/criteria/to/filters/{filterId}:
    post:
      consumes:
      - application/json
      description: Save criteria to filter
      parameters:
      - description: Filter Id
        in: path
        name: filterId
        required: true
        type: integer
      - description: Create filter
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.CriteriaDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CriteriaDto'
        "400": {}
        "403": {}
      summary: Save criteria to filter
      tags:
      - criteria
  /v1/criteria/to/products/{productId}:
    post:
      consumes:
      - application/json
      description: Save criteria to product
      parameters:
      - description: Product Id
        in: path
        name: productId
        required: true
        type: integer
      - description: Create criteria
        in: body
        name: account
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CriteriaDto'
        "400": {}
        "403": {}
      summary: Save criteria to product
      tags:
      - criteria
  /v1/fetch/{orderId}:
    get:
      consumes:
      - application/json
      description: Get manager by order id
      parameters:
      - description: Order ID
        in: path
        name: status
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ManagerDto'
        "400": {}
        "403": {}
      summary: Get manager by order id
      tags:
      - manager
  /v1/filters:
    put:
      consumes:
      - application/json
      description: Update filters information
      parameters:
      - description: Update filter
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.FilterDto'
      produces:
      - application/json
      responses:
        "200": {}
        "403": {}
        "404": {}
      summary: Update filters
      tags:
      - filters
  /v1/filters/{filterId}:
    get:
      consumes:
      - application/json
      description: Get filters
      parameters:
      - description: Filter ID
        in: path
        name: filterId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FilterDto'
        "400": {}
        "403": {}
      summary: Get filters
      tags:
      - filters
  /v1/filters/{subcategoryName}:
    post:
      consumes:
      - application/json
      description: Save filters
      parameters:
      - description: Subcategory Name
        in: path
        name: subcategoryName
        required: true
        type: string
      - description: Create filter
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.FilterDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FilterDto'
        "400": {}
        "403": {}
      summary: Save filters
      tags:
      - filters
  /v1/products:
    put:
      consumes:
      - application/json
      description: Update product information
      parameters:
      - description: Update product
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.ProductDto'
      produces:
      - application/json
      responses:
        "200": {}
        "403": {}
        "404": {}
      summary: Update Product
      tags:
      - products
  /v1/products/{productId}:
    get:
      consumes:
      - application/json
      description: Get product
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductDto'
        "400": {}
        "403": {}
      summary: Get product
      tags:
      - products
  /v1/products/{productId}/{status}:
    delete:
      consumes:
      - application/json
      description: Change status product
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      - description: Product Status
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200": {}
        "403": {}
        "404": {}
      summary: Change Product
      tags:
      - products
  /v1/products/{subcategoryName}:
    post:
      consumes:
      - application/json
      description: Save product
      parameters:
      - description: Category Name
        in: path
        name: categoryName
        required: true
        type: string
      - description: Create products
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.ProductDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductDto'
        "400": {}
        "403": {}
      summary: Save product
      tags:
      - products
  /v1/products/un-publish:
    get:
      consumes:
      - application/json
      description: Get product
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductDto'
        "400": {}
        "403": {}
      summary: Get product
      tags:
      - products
  /v1/specifications:
    put:
      consumes:
      - application/json
      description: Update specification information
      parameters:
      - description: Update specification
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.SpecificationDto'
      produces:
      - application/json
      responses:
        "200": {}
        "403": {}
        "404": {}
      summary: Update Specification
      tags:
      - specification
  /v1/specifications/{productId}:
    post:
      consumes:
      - application/json
      description: Save specification
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      - description: Create products
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.SpecificationDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductDto'
        "400": {}
        "403": {}
      summary: Save specification
      tags:
      - specification
  /v1/specifications/{specificationId}:
    get:
      consumes:
      - application/json
      description: Get specification
      parameters:
      - description: Specification ID
        in: path
        name: specificationId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SpecificationDto'
        "400": {}
        "403": {}
      summary: Get specification
      tags:
      - specification
  /v1/subcategory:
    put:
      consumes:
      - application/json
      description: Update subcategory information
      parameters:
      - description: Update subcategory
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.SubcategoryDto'
      produces:
      - application/json
      responses:
        "200": {}
        "403": {}
        "404": {}
      summary: Update subcategory
      tags:
      - subcategory
  /v1/subcategory/{categoryName}:
    post:
      consumes:
      - application/json
      description: Save subcategory
      parameters:
      - description: Subcategory Name
        in: path
        name: subcategoryName
        required: true
        type: string
      - description: Create subcategory
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.SubcategoryDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SubcategoryDto'
        "400": {}
        "403": {}
      summary: Save subcategory
      tags:
      - subcategory
  /v1/subcategory/{subcategoryName}:
    get:
      consumes:
      - application/json
      description: Get subcategory
      parameters:
      - description: Subcategory Name
        in: path
        name: subcategoryName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SubcategoryDto'
        "400": {}
        "403": {}
      summary: Get subcategory
      tags:
      - subcategory
swagger: "2.0"
